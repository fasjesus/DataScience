setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(data))
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Dividir os dados
train_index <- createDataPartition(laranjas$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas[train_index, ]
test_data <- laranjas[-train_index, ]
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = train_data, method = "class")
rpart.plot(tree_model)
summary(laranjas)
# Validação cruzada usando caret
set.seed(42)
cv_control <- trainControl(method = "cv", number = 10)
cv_model <- train(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = laranjas,
method = "rpart",
trControl = cv_control)
# Mostrar resultados da validação cruzada
print(cv_model)
# Importância das variáveis
variable_importance <- varImp(cv_model)
print(variable_importance)
print(variable_importance)
# Plotar a importância das variáveis
plot(variable_importance, main = "Importância das Variáveis")
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# Transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Transformando variáveis categóricas em dummy
dummies <- dummyVars(cat_prod ~ ., data = laranjas)
laranjas_dummies <- data.frame(predict(dummies, newdata = laranjas))
laranjas_dummies$cat_prod <- laranjas$cat_prod
# Dividir os dados
train_index <- createDataPartition(laranjas_dummies$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas_dummies[train_index, ]
test_data <- laranjas_dummies[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ ., data = train_data, method = "class")
# Plotar a árvore de decisão
rpart.plot(tree_model)
# Validação cruzada usando caret
set.seed(42)
cv_control <- trainControl(method = "cv", number = 10)
cv_model <- train(cat_prod ~ .,
data = laranjas_dummies,
method = "rpart",
trControl = cv_control)
# Mostrar resultados da validação cruzada
print(cv_model)
# Importância das variáveis
variable_importance <- varImp(cv_model)
print(variable_importance)
# Plotar a importância das variáveis
plot(variable_importance, main = "Importância das Variáveis")
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# Transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Transformando variáveis categóricas em dummy antes de dividir os dados
dummies <- dummyVars(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço, data = laranjas)
laranjas_dummies <- data.frame(predict(dummies, newdata = laranjas))
laranjas_dummies$cat_prod <- laranjas$cat_prod
# Dividir os dados
train_index <- createDataPartition(laranjas_dummies$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas_dummies[train_index, ]
test_data <- laranjas_dummies[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ ., data = train_data, method = "class")
# Plotar a árvore de decisão
rpart.plot(tree_model)
# Validação cruzada usando caret
set.seed(42)
cv_control <- trainControl(method = "cv", number = 10)
cv_model <- train(cat_prod ~ .,
data = laranjas_dummies,
method = "rpart",
trControl = cv_control)
# Mostrar resultados da validação cruzada
print(cv_model)
# Importância das variáveis
variable_importance <- varImp(cv_model)
print(variable_importance)
# Plotar a importância das variáveis
plot(variable_importance, main = "Importância das Variáveis")
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# Transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Transformando variáveis categóricas em dummy antes de dividir os dados
dummies <- dummyVars(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço, data = laranjas)
laranjas_dummies <- data.frame(predict(dummies, newdata = laranjas))
laranjas_dummies$cat_prod <- laranjas$cat_prod
# Dividir os dados
train_index <- createDataPartition(laranjas_dummies$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas_dummies[train_index, ]
test_data <- laranjas_dummies[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ ., data = train_data, method = "class")
# Plotar a árvore de decisão
rpart.plot(tree_model)
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# Transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Transformando variáveis categóricas em dummy antes de dividir os dados
dummies <- dummyVars(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço, data = laranjas)
laranjas_dummies <- data.frame(predict(dummies, newdata = laranjas))
laranjas_dummies$cat_prod <- laranjas$cat_prod
# Dividir os dados
train_index <- createDataPartition(laranjas_dummies$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas_dummies[train_index, ]
test_data <- laranjas_dummies[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ ., data = train_data, method = "class")
# Plotar a árvore de decisão
rpart.plot(tree_model)
# Validação cruzada usando caret
set.seed(42)
cv_control <- trainControl(method = "cv", number = 10)
cv_model <- train(cat_prod ~ .,
data = laranjas_dummies,
method = "rpart",
trControl = cv_control)
# Mostrar resultados da validação cruzada
print(cv_model)
# Importância das variáveis
variable_importance <- varImp(cv_model)
print(variable_importance)
# Plotar a árvore de decisão
rpart.plot(tree_model)
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# Identificar valores faltantes e/ou não inteiros
missing_values <- colSums(is.na(laranjas))
print('Valores Faltantes:')
print(missing_values)
# Verificar se há valores não numéricos
non_numeric <- sapply(laranjas, function(col) !all(is.numeric(col)))
print('Valores Não Numéricos:')
print(non_numeric)
print(cidades)
print(climas)
# Transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Transformando variáveis categóricas em dummy antes de dividir os dados
dummies <- dummyVars(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço, data = laranjas)
laranjas_dummies <- data.frame(predict(dummies, newdata = laranjas))
laranjas_dummies$cat_prod <- laranjas$cat_prod
# Dividir os dados
train_index <- createDataPartition(laranjas_dummies$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas_dummies[train_index, ]
test_data <- laranjas_dummies[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ ., data = train_data, method = "class")
# Plotar a árvore de decisão
rpart.plot(tree_model)
# Validação cruzada usando caret
set.seed(42)
cv_control <- trainControl(method = "cv", number = 10)
cv_model <- train(cat_prod ~ .,
data = laranjas_dummies,
method = "rpart",
trControl = cv_control)
# Mostrar resultados da validação cruzada
print(cv_model)
# Importância das variáveis
variable_importance <- varImp(cv_model)
print(variable_importance)
# Plotar a importância das variáveis
plot(variable_importance, main = "Importância das Variáveis")
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Dividir os dados
train_index <- createDataPartition(laranjas$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas[train_index, ]
test_data <- laranjas[-train_index, ]
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = train_data, method = "class")
rpart.plot(tree_model)
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = test_data, method = "class")
rpart.plot(tree_model)
# Instalar e carregar o pacote 'e1071' para usar a função confusionMatrix
install.packages("e1071")
library(e1071)
# Fazer previsões sobre os dados de teste
test_predictions <- predict(tree_model, test_data, type = "class")
# Comparar previsões com os valores reais
confusion_matrix <- confusionMatrix(test_predictions, test_data$cat_prod)
# Exibir a matriz de confusão
print(confusion_matrix)
# Instalar e carregar o pacote 'e1071' para usar a função confusionMatrix
install.packages("e1071")
library(e1071)
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Dividir os dados
train_index <- createDataPartition(laranjas$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas[train_index, ]
test_data <- laranjas[-train_index, ]
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = train_data, method = "class")
rpart.plot(tree_model)
# Fazer previsões sobre os dados de teste
test_predictions <- predict(tree_model, test_data, type = "class")
# Comparar previsões com os valores reais
confusion_matrix <- confusionMatrix(test_predictions, test_data$cat_prod)
# Exibir a matriz de confusão
print(confusion_matrix)
# Instalar e carregar o pacote 'ggplot2' para criar o plot
install.packages("ggplot2")
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
head(laranjas)
# Pegando colunas não numéricas
cidades <- unique(laranjas$Cidade)
climas <- unique(laranjas$Clima)
# Reconhecimento dos dados
summary(laranjas)
# transformando dados de produção em (baixa, media, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Dividir os dados
train_index <- createDataPartition(laranjas$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas[train_index, ]
test_data <- laranjas[-train_index, ]
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = train_data, method = "class")
rpart.plot(tree_model)
# Fazer previsões sobre os dados de teste
test_predictions <- predict(tree_model, test_data, type = "class")
# Comparar previsões com os valores reais
confusion_matrix <- confusionMatrix(test_predictions, test_data$cat_prod)
# Exibir a matriz de confusão
print(confusion_matrix)
# Função para plotar a matriz de confusão
plot_confusion_matrix <- function(conf_matrix) {
# Transformar a matriz de confusão em data frame
conf_matrix_melt <- as.data.frame(as.table(conf_matrix$table))
# Criar o plot usando ggplot2
ggplot(conf_matrix_melt, aes(x = Prediction, y = Reference, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%d", Freq)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(x = "Predicted", y = "Actual", fill = "Frequency") +
theme_minimal()
}
# Plotar a matriz de confusão
plot_confusion_matrix(confusion_matrix)
# Instalar e carregar pacotes necessários
install.packages("caret")
library(caret)
library(rpart)
library(rpart.plot)
library(e1071)
library(ggplot2)
# Definir o diretório de trabalho
setwd("C://Users/fdpc0/OneDrive/Área de Trabalho/uesclem/2024/DataScience/Laranjas")
# Importando o dataset
laranjas <- read.csv("laranja.csv", row.names = 1)
# Transformando dados de produção em (baixa, média, alta)
high_limit <- quantile(laranjas$Produção, 0.75)
low_limit <- quantile(laranjas$Produção, 0.25)
# Nova coluna no dataset com as categorias
laranjas$cat_prod <- cut(laranjas$Produção,
breaks = c(-Inf, low_limit, high_limit, Inf),
labels = c("Baixa", "Média", "Alta"))
# Definir uma semente para reprodutibilidade
set.seed(42)
# Dividir os dados
train_index <- createDataPartition(laranjas$cat_prod, p = 0.8, list = FALSE)
train_data <- laranjas[train_index, ]
test_data <- laranjas[-train_index, ]
# Treinar o modelo de árvore de decisão
tree_model <- rpart(cat_prod ~ Cidade + Ano + Área_Plantada + Clima + Fertilizantes + Preço,
data = train_data, method = "class")
rpart.plot(tree_model)
# Fazer previsões sobre os dados de teste
test_predictions <- predict(tree_model, test_data, type = "class")
# Comparar previsões com os valores reais
confusion_matrix <- confusionMatrix(test_predictions, test_data$cat_prod)
# Exibir a matriz de confusão
print(confusion_matrix)
# Função para plotar a matriz de confusão
plot_confusion_matrix <- function(conf_matrix) {
# Transformar a matriz de confusão em data frame
conf_matrix_df <- as.data.frame(conf_matrix$table)
# Criar o plot usando ggplot2
ggplot(conf_matrix_df, aes(x = Prediction, y = Reference, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%d", Freq)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(x = "Predicted", y = "Actual", fill = "Frequency") +
theme_minimal()
}
# Plotar a matriz de confusão
plot_confusion_matrix(confusion_matrix)
